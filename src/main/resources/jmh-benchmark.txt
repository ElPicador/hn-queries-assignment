# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Dvisualvm.id=201097324268677 -javaagent:/media/data/binaries/linux-64/JTools/idea-IC-182.3911.36/lib/idea_rt.jar=44505:/media/data/binaries/linux-64/JTools/idea-IC-182.3911.36/bin -Dfile.encoding=UTF-8
# Warmup: 1 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.algolia.assignment.app.QueriesBenchmark.distinctBenchmark

# Run progress: 0.00% complete, ETA 00:00:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.330 s/op
Iteration   1: 0.157 s/op
                 Max memory heap: 925892608.000 bytes

Iteration   2: 0.159 s/op
                 Max memory heap: 925892608.000 bytes

Iteration   3: 0.172 s/op
                 Max memory heap: 923795456.000 bytes

Iteration   4: 0.158 s/op
                 Max memory heap: 923795456.000 bytes

Iteration   5: 0.159 s/op
                 Max memory heap: 923795456.000 bytes

Iteration   6: 0.169 s/op
                 Max memory heap: 925892608.000 bytes

Iteration   7: 0.157 s/op
                 Max memory heap: 925892608.000 bytes

Iteration   8: 0.160 s/op
                 Max memory heap: 925892608.000 bytes

Iteration   9: 0.175 s/op
                 Max memory heap: 927989760.000 bytes

Iteration  10: 0.163 s/op
                 Max memory heap: 927989760.000 bytes



Result "com.algolia.assignment.app.QueriesBenchmark.distinctBenchmark":
  0.163 ±(99.9%) 0.010 s/op [Average]
  (min, avg, max) = (0.157, 0.163, 0.175), stdev = 0.007
  CI (99.9%): [0.153, 0.173] (assumes normal distribution)

Secondary result "com.algolia.assignment.app.QueriesBenchmark.distinctBenchmark:Max memory heap":
  927989760.000 ±(99.9%) 0.001 bytes [Maximum]
  (min, avg, max) = (923795456.000, 925682892.800, 927989760.000), stdev = 1547414.615
  CI (99.9%): [927989760.000, 927989760.000] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Dvisualvm.id=201097324268677 -javaagent:/media/data/binaries/linux-64/JTools/idea-IC-182.3911.36/lib/idea_rt.jar=44505:/media/data/binaries/linux-64/JTools/idea-IC-182.3911.36/bin -Dfile.encoding=UTF-8
# Warmup: 1 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.algolia.assignment.app.QueriesBenchmark.popularBenchmark

# Run progress: 50.00% complete, ETA 00:00:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.667 s/op
Iteration   1: 0.310 s/op
                 Max memory heap: 932708352.000 bytes

Iteration   2: 0.335 s/op
                 Max memory heap: 925892608.000 bytes

Iteration   3: 0.312 s/op
                 Max memory heap: 925892608.000 bytes

Iteration   4: 0.320 s/op
                 Max memory heap: 930611200.000 bytes

Iteration   5: 0.308 s/op
                 Max memory heap: 930611200.000 bytes

Iteration   6: 0.321 s/op
                 Max memory heap: 935854080.000 bytes

Iteration   7: 0.310 s/op
                 Max memory heap: 935854080.000 bytes

Iteration   8: 0.325 s/op
                 Max memory heap: 910163968.000 bytes

Iteration   9: 0.318 s/op
                 Max memory heap: 926941184.000 bytes

Iteration  10: 0.310 s/op
                 Max memory heap: 926941184.000 bytes



Result "com.algolia.assignment.app.QueriesBenchmark.popularBenchmark":
  0.317 ±(99.9%) 0.013 s/op [Average]
  (min, avg, max) = (0.308, 0.317, 0.335), stdev = 0.009
  CI (99.9%): [0.304, 0.330] (assumes normal distribution)

Secondary result "com.algolia.assignment.app.QueriesBenchmark.popularBenchmark:Max memory heap":
  935854080.000 ±(99.9%) 0.001 bytes [Maximum]
  (min, avg, max) = (910163968.000, 928147046.400, 935854080.000), stdev = 7365163.124
  CI (99.9%): [935854080.000, 935854080.000] (assumes normal distribution)


# Run complete. Total time: 00:00:34

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt          Score   Error  Units
QueriesBenchmark.distinctBenchmark                  avgt   10          0.163 ± 0.010   s/op
QueriesBenchmark.distinctBenchmark:Max memory heap  avgt   10  927989760.000          bytes
QueriesBenchmark.popularBenchmark                   avgt   10          0.317 ± 0.013   s/op
QueriesBenchmark.popularBenchmark:Max memory heap   avgt   10  935854080.000          bytes
