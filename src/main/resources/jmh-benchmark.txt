# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Dvisualvm.id=109094559163006 -javaagent:/media/data/binaries/linux-64/JTools/idea-IC-182.3911.36/lib/idea_rt.jar=41125:/media/data/binaries/linux-64/JTools/idea-IC-182.3911.36/bin -Dfile.encoding=UTF-8
# Warmup: 1 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.algolia.assignment.app.QueriesBenchmark.distinctBenchmark

# Run progress: 0.00% complete, ETA 00:00:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.271 s/op
Iteration   1: 0.258 s/op
                 Max memory heap: 759693312.000 bytes

Iteration   2: 0.244 s/op
                 Max memory heap: 759693312.000 bytes

Iteration   3: 0.252 s/op
                 Max memory heap: 759693312.000 bytes

Iteration   4: 0.257 s/op
                 Max memory heap: 793247744.000 bytes

Iteration   5: 0.244 s/op
                 Max memory heap: 793247744.000 bytes

Iteration   6: 0.256 s/op
                 Max memory heap: 793247744.000 bytes

Iteration   7: 0.255 s/op
                 Max memory heap: 793247744.000 bytes

Iteration   8: 0.269 s/op
                 Max memory heap: 806354944.000 bytes

Iteration   9: 0.245 s/op
                 Max memory heap: 806354944.000 bytes

Iteration  10: 0.248 s/op
                 Max memory heap: 806354944.000 bytes



Result "com.algolia.assignment.app.QueriesBenchmark.distinctBenchmark":
  0.253 ±(99.9%) 0.012 s/op [Average]
  (min, avg, max) = (0.244, 0.253, 0.269), stdev = 0.008
  CI (99.9%): [0.241, 0.265] (assumes normal distribution)

Secondary result "com.algolia.assignment.app.QueriesBenchmark.distinctBenchmark:Max memory heap":
  806354944.000 ±(99.9%) 0.001 bytes [Maximum]
  (min, avg, max) = (759693312.000, 787113574.400, 806354944.000), stdev = 19767581.286
  CI (99.9%): [806354944.000, 806354944.000] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Dvisualvm.id=109094559163006 -javaagent:/media/data/binaries/linux-64/JTools/idea-IC-182.3911.36/lib/idea_rt.jar=41125:/media/data/binaries/linux-64/JTools/idea-IC-182.3911.36/bin -Dfile.encoding=UTF-8
# Warmup: 1 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.algolia.assignment.app.QueriesBenchmark.popularBenchmark

# Run progress: 50.00% complete, ETA 00:00:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.701 s/op
Iteration   1: 0.295 s/op
                 Max memory heap: 930086912.000 bytes

Iteration   2: 0.319 s/op
                 Max memory heap: 925892608.000 bytes

Iteration   3: 0.285 s/op
                 Max memory heap: 925892608.000 bytes

Iteration   4: 0.308 s/op
                 Max memory heap: 903872512.000 bytes

Iteration   5: 0.295 s/op
                 Max memory heap: 903872512.000 bytes

Iteration   6: 0.319 s/op
                 Max memory heap: 924319744.000 bytes

Iteration   7: 0.298 s/op
                 Max memory heap: 924319744.000 bytes

Iteration   8: 0.308 s/op
                 Max memory heap: 863502336.000 bytes

Iteration   9: 0.325 s/op
                 Max memory heap: 863502336.000 bytes

Iteration  10: 0.319 s/op
                 Max memory heap: 922222592.000 bytes



Result "com.algolia.assignment.app.QueriesBenchmark.popularBenchmark":
  0.307 ±(99.9%) 0.020 s/op [Average]
  (min, avg, max) = (0.285, 0.307, 0.325), stdev = 0.013
  CI (99.9%): [0.287, 0.327] (assumes normal distribution)

Secondary result "com.algolia.assignment.app.QueriesBenchmark.popularBenchmark:Max memory heap":
  930086912.000 ±(99.9%) 0.001 bytes [Maximum]
  (min, avg, max) = (863502336.000, 908748390.400, 930086912.000), stdev = 25498645.652
  CI (99.9%): [930086912.000, 930086912.000] (assumes normal distribution)


# Run complete. Total time: 00:00:35

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt          Score   Error  Units
QueriesBenchmark.distinctBenchmark                  avgt   10          0.253 ± 0.012   s/op
QueriesBenchmark.distinctBenchmark:Max memory heap  avgt   10  806354944.000          bytes
QueriesBenchmark.popularBenchmark                   avgt   10          0.307 ± 0.020   s/op
QueriesBenchmark.popularBenchmark:Max memory heap   avgt   10  930086912.000          bytes
